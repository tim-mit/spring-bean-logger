package com.tim-mit.spring-bean-logger

import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.context.event.ContextStartedEvent;
import org.springframework.context.event.ContextStoppedEvent;
import org.springframework.stereotype.Component;

@Component
public class DebugEventListener implements ApplicationListener {
	
    @Override
    public void onApplicationEvent(ApplicationEvent event) {
    
        if (event instanceof ContextRefreshedEvent) {
        	System.out.println("Spring context has refreshed");
            logBeans(((ContextRefreshedEvent) event).getApplicationContext());
        }
        if (event instanceof ContextStartedEvent) {
        	System.out.println("Spring context has started");
            logBeans(((ContextStartedEvent) event).getApplicationContext());
        }
        if (event instanceof ContextStoppedEvent) {
        	System.out.println("Spring context has stopped");
            logBeans(((ContextStoppedEvent) event).getApplicationContext());
        }
        if (event instanceof ContextClosedEvent) {
        	System.out.println("Spring context has closed");
            logBeans(((ContextClosedEvent) event).getApplicationContext());
        }

    }
    
    public void logBeans(ApplicationContext applicationContext) {
        
        String[] beans = applicationContext.getBeanDefinitionNames();
        
        for (String b : beans) {
        	System.out.println("bean [" + b + "]");
        	System.out.println(" - " + applicationContext.getType(b));
        	String[] aliases = applicationContext.getAliases(b);
        	if (aliases != null && aliases.length > 0) {
        		for (String a : aliases) {
        			System.out.println(" - " + a);
        		}
        	}
        }
    }

}
